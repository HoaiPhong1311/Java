Cho mảng A[] và B[] lần lượt gồm N và M số nguyên, nhiệm vụ của bạn là tìm giao của 2 mảng này và in theo thứ tự xuất hiện trong mảng A[].

Gợi ý :

Cách 1 : Dùng 2 set để lưu 2 mảng A, B sau đó duyệt 1 trong 2 mảng và tìm kiếm sự xuất hiện của phần tử đang duyệt trong mảng còn lại.

Cách 2 : Dùng 1 map để đánh dấu, duyệt qua các phần tử trong mảng A[] và cho map của từng phần tử trong mảng A[] = 1, duyệt qua mảng B[] thì kiểm tra nếu map của phần tử trong mảng B đã bằng 1 thì chuyển thành 2. Cuối cùng duyệt map và in ra những phần tử được đánh dấu là 2.

Input Format

Dòng 1 gồm N và M

Dòng 2 gồm N số trong mảng A[]

Dòng 3 gồm M số trong mảng B[]

Constraints

1<=N,M<=10^5

-10^9<=A[i],B[i]<=10^9

Output Format

In ra tập giao của 2 mảng theo thứ tự xuất hiện trong mảng A[]

Sample Input 0

9 8
7 5 0 0 1 6 2 7 3 
6 4 9 4 2 8 3 5 
Sample Output 0

5 6 2 3 

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

public class Draft {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        LinkedHashMap<Integer, Integer> map = new LinkedHashMap<>();
        int a = sc.nextInt(), b = sc.nextInt();
        for(int i = 0; i < a; i++){
            int x = sc.nextInt();
            map.put(x, 1);
        }
        for(int i = 0; i < b; i++){
            int x = sc.nextInt();
            if(map.containsKey(x) && map.get(x) == 1)
                map.put(x, 2);
        }
        Set<Map.Entry<Integer, Integer>> set = map.entrySet();
        for(Map.Entry<Integer, Integer> entry : set){
            if(entry.getValue() == 2)
                System.out.print(entry.getKey() + " ");
        }
    }
}
