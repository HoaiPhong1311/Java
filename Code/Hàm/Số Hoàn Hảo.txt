Số hoàn hảo là số có tổng các ước thực sự (Không tính chính nó) bằng chính số đó. Cho một số nguyên dương n, kiểm tra xem n có phải là số hoàn hảo hay không.

Định lý Euclid - Euler :' Nếu p là số nguyên tố và 2^p - 1 cũng là số nguyên tố thì : 2^(p-1) * (2^p - 1) sẽ tạo thành 1 số hoàn hảo. Ví dụ p = 2, 2^2 - 1 = 3, 2 * 3 = 6 => HH Ví dụ p = 3, 2^3 - 1 = 7, 4 * 7 = 28 => HH

Tham khảo : https://blog.28tech.com.vn/c-so-hoan-hao

Input Format

Số nguyên dương N

Constraints

1≤N≤9*10^18

Output Format

In YES nếu N là số hoàn hảo, ngược lại in NO

Sample Input 0

28
Sample Output 0

YES
Explanation 0

28 có các ước thực sự là 1, 2, 4, 7, 14 có tổng bằng 28.

import java.util.Scanner;

public class Draft {
    
    public static boolean soNguyenTo(long n){
        for(int i = 2; i <= Math.sqrt(n); i++){
            if(n % i == 0) return false;
        }
        return n > 1;
    }
    
    public static boolean soHoanHao(long n){
        for(int p = 2; p <= 32; p++){
            if(soNguyenTo(p)){
                long tmp = (long)Math.pow(2, p) - 1;
                if(soNguyenTo(tmp)){
                    long num = (long)Math.pow(2, p - 1) * tmp;
                    if(num == n) return true;
                }
            }
        }
        return false;
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        long n = sc.nextLong();
        if(soHoanHao(n)) System.out.println("YES");
        else System.out.println("NO");
    }
}
